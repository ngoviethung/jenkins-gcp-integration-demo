version: '3.5'
services:

  # The Application
  app:
    #container_name: container_name_app
    build:
      context: ../ #context ra ngoai de co the copy . . trong dockerfile
      dockerfile: .docker/Dockerfile
    #image: image_name:latest
    restart: unless-stopped
    volumes:
      - ../:/var/www/html
      - ../storage/logs/docker:/var/log
      - ./php-fpm/php-ini-overrides.ini:/usr/local/etc/php/conf.d/php-ini-overrides.ini
      - ./php-fpm/zz-www-overrides.conf:/usr/local/etc/php-fpm.d/zz-www-overrides.conf
    networks:
      - private
#      - protected
#    extra_hosts:
#      - "host.docker.internal:host-gateway"

  # The Web Server
  webserver:
    #container_name: container_name_webserver
    image: nginx:1.17-alpine
    restart: unless-stopped
    ports:
      - ${WEBSERVER_PORT}:80
    volumes:
      - ../:/var/www/html
      - ./nginx/overrides.conf:/etc/nginx/conf.d/default.conf
    networks:
      - private
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:80 || exit 1z
      interval: 30s
      timeout: 10s
      retries: 5

  # The Mysql
  mysql:
    #container_name: container_name_database
    image: mysql:5.7
    restart: unless-stopped
    volumes:
      - ./dbdata:/var/lib/mysql

    env_file:
      - .env
    environment:
      - "MYSQL_DATABASE:${MYSQL_DATABASE}"
      #- "MYSQL_USER=${MYSQL_USER}"
      #- "MYSQL_PASSWORD=${MYSQL_PASSWORD}"
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - private
#      - protected

  mongo:
    image: mongo
    restart: unless-stopped
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - ./mongodb:/data/db
    environment:
      - "MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}"
      - "MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}"
    #de dau : nhu nay la ko nhan
    #        - "MONGO_INITDB_ROOT_USERNAME:${MONGO_INITDB_ROOT_USERNAME}"
    #        - "MONGO_INITDB_ROOT_PASSWORD:${MONGO_INITDB_ROOT_PASSWORD}"

    #nhung de nhu nay thi nhan
    #        MONGO_INITDB_ROOT_USERNAME: root
    #        MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - private
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 3s
      retries: 3


  redis:
    image: redis:5.0.4
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./redisdb:/data
    networks:
      - private

  #RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./rabbitmq/data/:/var/lib/rabbitmq/
      - ./rabbitmq/log/:/var/log/rabbitmq
    networks:
      - private
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672/" ]
      interval: 5s
      timeout: 3s
      retries: 3
    command: sh -c "apk add --no-cache curl && exec rabbitmq-server"

  rabbitmq-consumer-vote:
    build:
      context: ../ #context ra ngoai de co the copy . . trong dockerfile
      dockerfile: .docker/Dockerfile_consumer
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      replicas: 2
    volumes:
      - ../:/var/www/html
    networks:
      - private
    command: ["php", "artisan", "rabbitmq:consume", "vote"]

  rabbitmq-consumer-merge-image:
    build:
      context: ../ #context ra ngoai de co the copy . . trong dockerfile
      dockerfile: .docker/Dockerfile_consumer
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      replicas: 3
    volumes:
      - ../:/var/www/html
    networks:
      - private
    command: [ "php", "artisan", "rabbitmq:consume", "merge_image" ]

# Networks
networks:
  private:
    name: ${NETWORK_PRIVATE}
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.88.0.0/16  # Thay đổi subnet tùy theo nhu cầu
#  protected:
#    external:
#      name: ${NETWORK_PROTECTED}

